######################
#SELECT STATEMENTS
######################

SELECT * FROM TABLENAME;
--To test whether it can give range output in case when output is coming from multiple shards 
SELECT * FROM TABLENAME LIMIT 1000 OFFSET 10;

SELECT * FROM TABLENAME WHERE PK=VALUE; 
SELECT * FROM TABLENAME WHERE SK=VALUE; 
SELECT * FROM TABLENAME WHERE SEC_LOOKUP_INDEX=VALUE; 
SELECT * FROM TABLENAME WHERE SEC_INDEX=VALUE;
SELECT * FROM TABLENAME WHERE NON_INDEX=VALUE; 

SELECT * FROM TABLENAME WHERE PK <= VALUE; 
SELECT * FROM TABLENAME WHERE PK <= VALUE AND NON_INDEX LIKE '%VALUE%';
--IF ABOVE FAILS THEN PERFORM THESE ELSE ASSUME THE REST THREE ALSO WORKS
    SELECT * FROM TABLENAME ORDER BY PK <= VALUE OR SK != VALUE; 
    SELECT * FROM TABLENAME ORDER BY PK <= VALUE AND SEC_LOOKUP_INDEX IN (VALUE1,VALUE2); 
    SELECT * FROM TABLENAME ORDER BY PK <= VALUE AND SEC_INDEX NOT IN (VALUE1,VALUE2);
SELECT * FROM TABLENAME WHERE SK <= VALUE;
SELECT * FROM TABLENAME WHERE SEC_LOOKUP_INDEX<VALUE;
SELECT * FROM TABLENAME WHERE SEC_INDEX<VALUE;
SELECT * FROM TABLENAME WHERE NON_INDEX LIKE ‘%VALUE%’;

SELECT * FROM TABLENAME ORDER BY NON_INDEX;
--IF ABOVE FAILS THEN PERFORM THESE ELSE ASSUME THE REST FOUR ALSO WORKS
    SELECT * FROM TABLENAME ORDER BY PK;
    SELECT * FROM TABLENAME ORDER BY SK;
    SELECT * FROM TABLENAME ORDER BY SEC_LOOKUP_INDEX; 
    SELECT * FROM TABLENAME ORDER BY SEC_INDEX;

SELECT COUNT(*) FROM TABLENAME GROUP BY NON_INDEX; 
--IF ABOVE FAILS THEN PERFORM THESE ELSE ASSUME THE REST FOUR ALSO WORKS
    SELECT COUNT(*) FROM TABLENAME GROUP BY PK;
    SELECT COUNT(*) FROM TABLENAME GROUP BY SK;
    SELECT COUNT(*) FROM TABLENAME GROUP BY SEC_LOOKUP_INDEX;
    SELECT COUNT(*) FROM TABLENAME GROUP BY SEC_INDEX;

SELECT AVG(PK) FROM TABLENAME GROUP BY NON_INDEX; 
--IF ABOVE FAILS THEN PERFORM THESE ELSE ASSUME THE REST FOUR ALSO WORKS
    SELECT AVG(PK) FROM TABLENAME GROUP BY PK; 
    SELECT AVG(PK) FROM TABLENAME GROUP BY SK; 
    SELECT AVG(PK) FROM TABLENAME GROUP BY SEC_LOOKUP_INDEX; 
    SELECT AVG(PK) FROM TABLENAME GROUP BY SEC_INDEX;

SELECT AVG(NON_INDEX) FROM TABLENAME GROUP BY NON_INDEX; 
--IF ABOVE FAILS THEN PERFORM THESE ELSE ASSUME THE REST FOUR ALSO WORKS
    SELECT AVG(NON_INDEX) FROM TABLENAME GROUP BY PK; 
    SELECT AVG(NON_INDEX) FROM TABLENAME GROUP BY SK; 
    SELECT AVG(NON_INDEX) FROM TABLENAME GROUP BY SEC_LOOKUP_INDEX; 
    SELECT AVG(NON_INDEX) FROM TABLENAME GROUP BY SEC_INDEX;

SELECT DISTINCT(PK) FROM TABLENAME GROUP BY NON_INDEX; 
--IF ABOVE FAILS THEN PERFORM THESE ELSE ASSUME THE REST FOUR ALSO WORKS
    SELECT DISTINCT(PK) FROM TABLENAME GROUP BY PK; 
    SELECT DISTINCT(PK) FROM TABLENAME GROUP BY SK; 
    SELECT DISTINCT(PK) FROM TABLENAME GROUP BY SEC_LOOKUP_INDEX; 
    SELECT DISTINCT(PK) FROM TABLENAME GROUP BY SEC_INDEX;

SELECT DISTINCT(NON_INDEX) FROM TABLENAME GROUP BY NON_INDEX; 
--IF ABOVE FAILS THEN PERFORM THESE ELSE ASSUME THE REST FOUR ALSO WORKS
    SELECT DISTINCT(NON_INDEX) FROM TABLENAME GROUP BY PK; 
    SELECT DISTINCT(NON_INDEX) FROM TABLENAME GROUP BY SK; 
    SELECT DISTINCT(NON_INDEX) FROM TABLENAME GROUP BY SEC_LOOKUP_INDEX; 
    SELECT DISTINCT(NON_INDEX) FROM TABLENAME GROUP BY SEC_INDEX;

--MAINLY FOR PERFORMANCE TESTING
SELECT PK FROM TABLENAME WHERE PK=VALUE;
SELECT PK FROM TABLENAME WHERE SK=VALUE;
SELECT PK FROM TABLENAME WHERE SEC_LOOKUP_INDEX=VALUE;
SELECT PK FROM TABLENAME WHERE SEC_INDEX=VALUE;
SELECT PK FROM TABLENAME WHERE NON_INDEX=VALUE;

SELECT SK FROM TABLENAME WHERE PK=VALUE;
SELECT SK FROM TABLENAME WHERE SK=VALUE;
SELECT SK FROM TABLENAME WHERE SEC_LOOKUP_INDEX=VALUE;
SELECT SK FROM TABLENAME WHERE SEC_INDEX=VALUE;
SELECT SK FROM TABLENAME WHERE NON_INDEX=VALUE;

SELECT SEC_INDEX FROM TABLENAME WHERE PK=VALUE;
SELECT SEC_INDEX FROM TABLENAME WHERE SK=VALUE;
SELECT SEC_INDEX FROM TABLENAME WHERE SEC_LOOKUP_INDEX=VALUE;
SELECT SEC_INDEX FROM TABLENAME WHERE SEC_INDEX=VALUE;
SELECT SEC_INDEX FROM TABLENAME WHERE NON_INDEX=VALUE;

SELECT SEC_LOOKUP_INDEX FROM TABLENAME WHERE PK=VALUE;
SELECT SEC_LOOKUP_INDEX FROM TABLENAME WHERE SK=VALUE;
SELECT SEC_LOOKUP_INDEX FROM TABLENAME WHERE SEC_LOOKUP_INDEX=VALUE;
SELECT SEC_LOOKUP_INDEX FROM TABLENAME WHERE SEC_INDEX=VALUE;
SELECT SEC_LOOKUP_INDEX FROM TABLENAME WHERE NON_INDEX=VALUE;

SELECT NON_INDEX FROM TABLENAME WHERE PK=VALUE;
SELECT NON_INDEX FROM TABLENAME WHERE SK=VALUE;
SELECT NON_INDEX FROM TABLENAME WHERE SEC_LOOKUP_INDEX=VALUE;
SELECT NON_INDEX FROM TABLENAME WHERE SEC_INDEX=VALUE;
SELECT NON_INDEX FROM TABLENAME WHERE NON_INDEX=VALUE;

######################
#INSERT STATEMENTS
######################

INSERT INTO TABLENAME (COLUMN_LIST) VALUES (COLUMN_VALUES);
INSERT INTO TABLENAME (COLUMN_LIST WITHOUT COLS WITH DEFAULT VALUES) VALUES (COLUMN_VALUES);
INSERT INTO TABLENAME (COLUMN_LIST WITHOUT COLS WITH NULLABLE PROPERTY) VALUES (COLUMN_VALUES);
--MINIMAL SET COULD BE WITHOUT COLS WITH PROPERTIES LIKE NULLABLE, DEFAULT VALUE, AUTOINCREMENT
INSERT INTO TABLENAME (MINIMAL COLUMNS REQUIRED) VALUES (COLUMN_VALUES);

INSERT INTO TABLENAME (COLUMN_LIST) VALUES (COLUMN_VALUES1),(COLUMN_VALUES2);
INSERT INTO TABLENAME1 (COLUMN_LIST) VALUES SELECT (COLUMN_LIST) FROM TABLENAME2;
INSERT INTO TABLENAME (COLUMN_LIST) VALUES (COLUMN_VALUES) ON DUPLICATE KEY UPDATE UPDATE_EXPRESSION;

######################
#DELETE STATEMENTS
######################

DELETE FROM TABLENAME; 
DELETE FROM TABLENAME WHERE NON_INDEX<=VALUE;
--IF ABOVE FAILS THEN PERFORM THESE ELSE ASSUME THE REST FOUR ALSO WORKS
    DELETE FROM TABLENAME WHERE PK<=VALUE;
    DELETE FROM TABLENAME WHERE SK<=VALUE;
    DELETE FROM TABLENAME WHERE SEC_LOOKUP_INDEX<=VALUE;
    DELETE FROM TABLENAME WHERE SEC_INDEX<=VALUE;
    DELETE FROM TABLENAME WHERE NON_INDEX=VALUE;
    --IF ABOVE FAILS THEN PERFORM THESE ELSE ASSUME THE REST FOUR ALSO WORKS
        DELETE FROM TABLENAME WHERE PK=VALUE;
        DELETE FROM TABLENAME WHERE SK=VALUE;
        DELETE FROM TABLENAME WHERE SEC_LOOKUP_INDEX=VALUE;
        DELETE FROM TABLENAME WHERE SEC_INDEX=VALUE;

--NEED NOT CHECK THE OTHER CASES AS IF THIS STATEMENT IS WORKING AND THE DELETE STATEMENT WITH WHERE CLAUSE AND ORDER_BY IS WORKING THEN THE OTHERS WILL ALSO WORK 
DELETE FROM TABLENAME WHERE NON_INDEX<=VALUE ORDER BY NON_INDEX;

DELETE FROM TABLENAME1, TABLENAME2; 
DELETE FROM TABLENAME1,TABLENAME2 USING TABLENAME1 INNER JOIN TABLENAME2 WHERE NON_INDEX<=VALUE;
--IF ABOVE FAILS THEN PERFORM THESE ELSE ASSUME THE REST FOUR ALSO WORKS
    DELETE FROM TABLENAME1,TABLENAME2 USING TABLENAME1 INNER JOIN TABLENAME2 WHERE PK<=VALUE;
    DELETE FROM TABLENAME1,TABLENAME2 USING TABLENAME1 INNER JOIN TABLENAME2 WHERE SK<=VALUE;
    DELETE FROM TABLENAME1,TABLENAME2 USING TABLENAME1 INNER JOIN TABLENAME2 WHERE SEC_LOOKUP_INDEX<=VALUE;
    DELETE FROM TABLENAME1,TABLENAME2 USING TABLENAME1 INNER JOIN TABLENAME2 WHERE SEC_INDEX<=VALUE;
    DELETE FROM TABLENAME1,TABLENAME2 USING TABLENAME1 INNER JOIN TABLENAME2 WHERE NON_INDEX=VALUE;
    --IF ABOVE FAILS THEN PERFORM THESE ELSE ASSUME THE REST FOUR ALSO WORKS
        DELETE FROM TABLENAME1,TABLENAME2 USING TABLENAME1 INNER JOIN TABLENAME2 WHERE PK=VALUE;
        DELETE FROM TABLENAME1,TABLENAME2 USING TABLENAME1 INNER JOIN TABLENAME2 WHERE SK=VALUE;
        DELETE FROM TABLENAME1,TABLENAME2 USING TABLENAME1 INNER JOIN TABLENAME2 WHERE SEC_LOOKUP_INDEX=VALUE;
        DELETE FROM TABLENAME1,TABLENAME2 USING TABLENAME1 INNER JOIN TABLENAME2 WHERE SEC_INDEX=VALUE;

--NEED NOT CHECK THE OTHER CASES AS IF THIS STATEMENT IS WORKING AND THE DELETE STATEMENT WITH WHERE CLAUSE AND ORDER_BY IS WORKING THEN THE OTHERS WILL ALSO WORK 
DELETE FROM TABLENAME WHERE NON_INDEX<=VALUE ORDER BY NON_INDEX;

######################
#UPDATE STATEMENTS
######################

UPDATE TABLE TABLENAME SET SK=VALUE1; --WHEN NOT PRIMARY KEY AND NOT UNIQUE
UPDATE TABLE TABLENAME SET SK=EXPRESSION_WITH_ONLY_SELF; --WHEN NOT PRIMARY KEY AND NOT UNIQUE
UPDATE TABLE TABLENAME SET SK=EXPRESSION_WITH_OTHERS; --WHEN NOT PRIMARY KEY AND NOT UNIQUE
UPDATE TABLE TABLENAME SET SEC_LOOKUP_INDEX=VALUE1; 
UPDATE TABLE TABLENAME SET SEC_LOOKUP_INDEX=EXPRESSION_WITH_ONLY_SELF; 
UPDATE TABLE TABLENAME SET SEC_LOOKUP_INDEX=EXPRESSION_WITH_OTHERS; 
UPDATE TABLE TABLENAME SET SEC_INDEX=VALUE1; 
UPDATE TABLE TABLENAME SET SEC_INDEX=EXPRESSION_WITH_ONLY_SELF; 
UPDATE TABLE TABLENAME SET SEC_INDEX=EXPRESSION_WITH_OTHERS; 
UPDATE TABLE TABLENAME SET NON_INDEX=VALUE1; 
UPDATE TABLE TABLENAME SET NON_INDEX=EXPRESSION_WITH_ONLY_SELF; 
UPDATE TABLE TABLENAME SET NON_INDEX=EXPRESSION_WITH_OTHERS; 

UPDATE TABLE TABLENAME SET PK=VALUE1, SK=VALUE1; 
UPDATE TABLE TABLENAME SET PK=VALUE1, SEC_LOOKUP_INDEX=VALUE1; 
UPDATE TABLE TABLENAME SET PK=VALUE1, NON_INDEX=VALUE1; 

UPDATE TABLE TABLENAME SET SK=VALUE WHERE PK=VALUE;
UPDATE TABLE TABLENAME SET SK=VALUE WHERE SEC_LOOKUP_INDEX=VALUE;
UPDATE TABLE TABLENAME SET SK=VALUE WHERE NON_INDEX=VALUE;

UPDATE TABLENAME1, TABLENAME2 SET COLUMN=VALUE WHERE CONDITION;
UPDATE TABLENAME1, TABLENAME2 SET COLUMN=EXPRESSION WHERE CONDITION;