<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="vSchema" enabled="true">
      <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
        <boolProp name="LoopController.continue_forever">false</boolProp>
        <stringProp name="LoopController.loops">1</stringProp>
      </elementProp>
      <stringProp name="ThreadGroup.num_threads">1</stringProp>
      <stringProp name="ThreadGroup.ramp_time">0</stringProp>
      <longProp name="ThreadGroup.start_time">1465147238000</longProp>
      <longProp name="ThreadGroup.end_time">1465147238000</longProp>
      <boolProp name="ThreadGroup.scheduler">false</boolProp>
      <stringProp name="ThreadGroup.duration"></stringProp>
      <stringProp name="ThreadGroup.delay"></stringProp>
    </ThreadGroup>
    <hashTree>
      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="init" enabled="true">
        <stringProp name="BeanShellSampler.query">bsh.shared.tableMetaData = new HashMap();
bsh.shared.autoIncrement = new HashMap();
bsh.shared.testCases = new ArrayList();
bsh.shared.dataTypes = new ArrayList();
bsh.shared.tableName = new ArrayList();
bsh.shared.values = new ArrayList();
bsh.shared.ignoreTables = new ArrayList();

bsh.shared.acceptableColTypes = new ArrayList();
bsh.shared.acceptableColTypes.add(${SHARDINGKEY});
bsh.shared.acceptableColTypes.add(${VINDEX_UNIQUE});

bsh.shared.mutableColTypes = new ArrayList();
bsh.shared.mutableColTypes.add(${NON_INDEX});
bsh.shared.mutableColTypes.add(${SEC_INDEX});
//bsh.shared.mutableColTypes.add(${PRIMARYKEY});	//works but not supported as not the use-case

br = new BufferedReader(new FileReader(vars.get(&quot;IGNORETABLES&quot;)));
while((line = br.readLine()) != null){
	bsh.shared.ignoreTables(line);
}</stringProp>
        <stringProp name="BeanShellSampler.filename"></stringProp>
        <stringProp name="BeanShellSampler.parameters"></stringProp>
        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
      </BeanShellSampler>
      <hashTree/>
      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="vschemaExtractor" enabled="true">
        <stringProp name="BeanShellSampler.query">import org.json.simple.*;
import org.json.simple.parser.JSONParser;

/*
 * Sharing Key Index Type ArrayList
 */
shardingKeyIndexType = new ArrayList();
shardingKeyIndexType.add(&quot;hash&quot;);
shardingKeyIndexType.add(&quot;binarymd5&quot;);
shardingKeyIndexType.add(&quot;unicodeloosemd5&quot;);

/*
 * VIndexUnique Type ArrayList
 */
vindexUniqueType = new ArrayList();
vindexUniqueType.add(&quot;lookup_hash_unique&quot;);

String tableName = &quot;&quot;;
JSONParser parser = new JSONParser();
Object obj = parser.parse(new FileReader(${VSCHEMAFILE}));
JSONObject jsonObject = (JSONObject) obj;
JSONObject shardingKey = new JSONObject();

vindex = new HashMap();
vindexUnique = new HashMap();

boolean shardedStatus = jsonObject.get(&quot;sharded&quot;);
JSONObject tables = jsonObject.get(&quot;tables&quot;);
JSONObject vindexes = jsonObject.get(&quot;vindexes&quot;);
Iterator keys = tables.keySet().iterator();

getColumnVindexes(JSONObject tableDetails){
	vindex.put(tableName, new ArrayList());
	for(Object tableObj: tableDetails.get(&quot;column_vindexes&quot;)){
//		System.out.println(&quot;TableName &quot; + vindexes.get(obj.get(&quot;name&quot;)));
		String type = vindexes.get(tableObj.get(&quot;name&quot;)).get(&quot;type&quot;);
		if(shardingKeyIndexType.contains(type)){
//			System.out.println(&quot;TableName&quot; + vindexes.get(obj.get(&quot;name&quot;)));
			shardingKey.put(tableName, tableObj.get(&quot;column&quot;));
		}
		else{
			vindex.get(tableName).add(tableObj.get(&quot;column&quot;));
		}
    }
    
}

getColumnUniqueVindexes(JSONObject tableDetails){
	vindexUnique.put(tableName, new ArrayList());
	for(Object tableObj: tableDetails.get(&quot;column_vindexes&quot;)){
//		System.out.println(&quot;TableName &quot; + vindexes.get(obj.get(&quot;name&quot;)));
		String type = vindexes.get(tableObj.get(&quot;name&quot;)).get(&quot;type&quot;);
		if(vindexUniqueType.contains(type)){
			vindexUnique.get(tableName).add(tableObj.get(&quot;column&quot;));
		}
	}
}

getAutoIncrement(JSONObject tableDetails){
	/*
	 * Written with the assumption that at max only one auto_increment column will be defined
	 */
	 try{
	 	String colName = tableDetails.get(&quot;auto_increment&quot;).get(&quot;column&quot;);
	 	hashSet = new HashSet();
	 	hashSet.add(colName);
	 	bsh.shared.autoIncrement.put(tableName, hashSet);
	 }
	 catch(Exception e){
		hashSet = new HashSet();
	 	bsh.shared.autoIncrement.put(tableName, hashSet);
	 }

}

getValues(String tableName){
    	getColumnVindexes(tables.get(tableName));
//  	getAutoIncrement(tables.get(tableName));
	getColumnUniqueVindexes(tables.get(tableName));	
}

if(vars.get(&quot;INPUTGIVEN&quot;).equals(&quot;n&quot;)){
	while(keys.hasNext()) {
		tableName = (String)keys.next();
		if(bsh.shared.ignoreTables.contains(tableName)){
			continue;	
		}
		getValues(tableName);
	}
}
else if(vars.get(&quot;INPUTGIVEN&quot;).equals(&quot;y&quot;)){
	BufferedReader br = null;
	String line = &quot;&quot;;
	try{
		br = new BufferedReader(new FileReader(vars.get(&quot;INPUTFILE&quot;)));
		while((line = br.readLine()) != null){
			tableName = line;
			if(bsh.shared.ignoreTables.contains(tableName)){
				continue;	
			}
			getValues(tableName);	
		}
	}
	catch(Exception e){
		System.out.println(e.getMessage());
		log.error(e.getMessage());
		IsSuccess = false;
	}
	
}
else{
	System.out.println(&quot;Argument for option: inputgiven is not valid!&quot;);
}

bsh.shared.vindex = vindex;
bsh.shared.shardingKey = shardingKey;
bsh.shared.vindexUnique = vindexUnique;
System.out.println(&quot;SKs &quot; + shardingKey);
System.out.println(&quot;Vindex &quot; + vindex);
System.out.println(&quot;IgnoreColumns: &quot; + bsh.shared.autoIncrement);
System.out.println(&quot;vindexUnique: &quot; + vindexUnique);</stringProp>
        <stringProp name="BeanShellSampler.filename"></stringProp>
        <stringProp name="BeanShellSampler.parameters"></stringProp>
        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
      </BeanShellSampler>
      <hashTree/>
      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="extractMetaData" enabled="true">
        <stringProp name="TestPlan.comments">Initialises the object in which the meta data of all the tables will be stored:  </stringProp>
        <stringProp name="BeanShellSampler.query">import java.sql.*;
import java.util.*;
import org.apache.jmeter.protocol.jdbc.config.DataSourceElement;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
Random rand = new Random();
String tableName = &quot;&quot;;
generateColNameList(int colCount, HashMap colLevel){
	colNameList = new ArrayList(colCount);
	for(int i=0; i&lt;colCount;i++){
		colNameList.add(null);
	}
	for(String colName: colLevel.keySet()){
		colNameList.set(colLevel.get(colName).get(&quot;ColumnNumber&quot;) - 1, colName);
	}
	return colNameList;
}

getPrimaryKeys(ResultSet rspk){
	pk = new ArrayList();
	while(rspk.next()){
		try{
			pk.set(rspk.getInt(&quot;KEY_SEQ&quot;) - 1, rspk.getString(&quot;COLUMN_NAME&quot;));	
		}
		catch(IndexOutOfBoundsException e){
			for(int i=pk.size(); i&lt;rspk.getInt(&quot;KEY_SEQ&quot;); i++){
				pk.add(null);
			}
			pk.set(rspk.getInt(&quot;KEY_SEQ&quot;) - 1, rspk.getString(&quot;COLUMN_NAME&quot;));
			//System.out.println(&quot;Error: &quot; + e.getMessage());
		}
		catch(Exception e){
			System.out.println(&quot;Error: &quot; + e.getMessage());
		}
	}
	return pk;
}

getSecondaryIndexes(ResultSet rsSecIndex){
	secIndex = new ArrayList();
	while(rsSecIndex.next()){
		if(rsSecIndex.getString(&quot;INDEX_NAME&quot;).equals(&quot;PRIMARY&quot;)){
			continue;
		}
		else{
			secIndex.add(rsSecIndex.getString(&quot;COLUMN_NAME&quot;));
		}
	}
	return secIndex;
}

getNonIndexes(ArrayList pk, ArrayList colNameList, ArrayList secIndex){
	nonIndex = new ArrayList();
	for(String colName: colNameList){
		if(pk.contains(colName) || secIndex.contains(colName) || bsh.shared.vindex.get(tableName).contains(colName) || bsh.shared.shardingKey.get(tableName).equals(colName)){
			continue;
		}
		else{
			nonIndex.add(colName);
		}
	}
	return nonIndex;
}

printResultSet(ResultSet rs){
	ResultSetMetaData rsmd = rs.getMetaData();
	int colCount = rsmd.getColumnCount();
	while(rs.next()){
		for (int i = 1; i &lt;= colCount; i++) {
	        if (i &gt; 1) System.out.print(&quot;,  &quot;);
	        System.out.print(rsmd.getColumnName(i) + &quot; &quot; + rs.getString(i));
	
	    }
	        System.out.println(&quot;\n&quot;);
	}
}

Connection conn;
try{
	String shardingKey = null; 
	
	BufferedReader br = null;
	String line = &quot;&quot;;
	conn = DataSourceElement.getConnection(vars.get(&quot;MACHINE&quot;));
	System.out.println(&quot;Connection established!&quot;);
	
	DatabaseMetaData dbmd = conn.getMetaData();

	for(String tN: bsh.shared.shardingKey.keySet()){
		tableName = tN;
		ResultSet rs = dbmd.getColumns(vars.get(&quot;DBNAME&quot;), null, tableName, null);
		tableMetaData = bsh.shared.tableMetaData;
		colLevel = new HashMap();
		int colCount = 0;	
		colNames = new ArrayList();
		colTypes = new ArrayList();
//		printResultSet(rs);	
		System.out.println(&quot;--------------------&quot;+tableName+ &quot;--------------------&quot;);
		
		while(rs.next()){

//Always declare new HashMap else use remove() method of hashMap. Because if clear() method is used then the element last added
//will get copied as many times as the number of elements in colList due to addition of reference in the colList in add() method. 
			int index = rs.getInt(&quot;ORDINAL_POSITION&quot;) - 1;
			try{
				colNames.set(index, rs.getString(&quot;COLUMN_NAME&quot;));
				colTypes.set(index, rs.getString(&quot;TYPE_NAME&quot;));
			}
			catch(IndexOutOfBoundsException e){
				for(int i=colNames.size(); i&lt;=index; i++){
					colNames.add(null);
					colTypes.add(null);
				}
				colNames.set(index, rs.getString(&quot;COLUMN_NAME&quot;));
				colTypes.set(index, rs.getString(&quot;TYPE_NAME&quot;));
			}
			catch(Exception e){
				System.out.println(&quot;Error: &quot; + e.getMessage());
			}
			colCount++;
		}
		tableLevel = new HashMap();
		tableLevel.put(&quot;ColNames&quot;, colNames);
		tableLevel.put(&quot;ColTypes&quot;, colTypes);
		tableLevel.put(&quot;ColCount&quot;, colCount);		
		tableLevel.put(${SHARDINGKEY}, bsh.shared.shardingKey.get(tableName));

		ResultSet rspk = dbmd.getPrimaryKeys(vars.get(&quot;DBNAME&quot;), null, tableName);		
///		printResultSet(rspk);
		pk = getPrimaryKeys(rspk);
		tableLevel.put(${PRIMARYKEY}, pk);

		ResultSet rsSecIndex = dbmd.getIndexInfo(vars.get(&quot;DBNAME&quot;), null, tableName, false, false);
		secIndex = getSecondaryIndexes(rsSecIndex);
		tableLevel.put(${SEC_INDEX}, secIndex);
	
		nonIndex = getNonIndexes(pk, colNames, secIndex);
		tableLevel.put(${NON_INDEX}, nonIndex);
		
		tableMetaData.put(tableName,tableLevel);
		bsh.shared.tableMetaData = tableMetaData;
	}

}
catch(Exception e){
	System.out.println(e);
	IsSuccess=false;
}
finally{
	conn.close();
	System.out.println(&quot;Connection closed!&quot;);
}
System.out.println(&quot;metaData &quot; + bsh.shared.tableMetaData);
</stringProp>
        <stringProp name="BeanShellSampler.filename"></stringProp>
        <stringProp name="BeanShellSampler.parameters"></stringProp>
        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
      </BeanShellSampler>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
